name: Build & Deploy Trading Lambdas

on:
  push:
    paths:
      - '.github/workflows/deploy-lambda.yml'
      - 'lambda_bot/**'
      - 'lambda_bot_twitter_scaper/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      FUNCTION_NAME:             ${{ secrets.LAMBDA_FUNCTION_NAME }}
      TWITTER_FUNCTION_NAME:     ${{ secrets.TWITTER_LAMBDA_FUNCTION_NAME }}
      LAYER_BUCKET:              ${{ secrets.LAYER_S3_BUCKET }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Set up Python 3.11.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.9'

      # ─── Layer: trading-bot-deps (cryptography, bcrypt, alpaca-py, pandas_market_calendars) ───

      - name: Install trading-bot-deps layer dependencies (Amazon Linux 2)
        run: |
          python -m pip install --upgrade pip
          mkdir -p layer/python

          docker run --rm \
            -v "${{ github.workspace }}/layer/python":/opt/python \
            public.ecr.aws/sam/build-python3.11:latest \
            /bin/bash -c "
              pip install --no-cache-dir \
                cryptography \
                bcrypt \
                alpaca-py \
                pandas_market_calendars \
                -t /opt/python \
              && find /opt/python -name '*.dist-info' -or -name '*.egg-info' | xargs rm -rf
            "

      - name: Package trading-bot-deps layer
        run: |
          cd layer
          zip -r ../layer.zip python

      - name: Upload trading layer.zip to S3
        run: aws s3 cp layer.zip s3://$LAYER_BUCKET/trading_layer.zip

      - name: Publish new trading-bot-deps Lambda layer version
        id: publish_trading_layer
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name trading-bot-deps \
            --description "Dependencies for trading bot (alpaca + market cal)" \
            --license-info "MIT" \
            --content S3Bucket=$LAYER_BUCKET,S3Key=trading_layer.zip \
            --compatible-runtimes python3.11 \
            --output text \
            --query LayerVersionArn)
          echo "tradingLayerArn=$LAYER_ARN" >> $GITHUB_OUTPUT

      - name: Show published Trading Layer ARN
        run: echo "→ ${{ steps.publish_trading_layer.outputs.tradingLayerArn }}"

      # ─── Layer: twitter-scraper-deps (requests) ─────────────────────────────────────

      - name: Install twitter-scraper-deps layer dependencies (Amazon Linux 2)
        run: |
          python -m pip install --upgrade pip
          mkdir -p layer_twitter/python

          docker run --rm \
            -v "${{ github.workspace }}/layer_twitter/python":/opt/python \
            public.ecr.aws/sam/build-python3.11:latest \
            /bin/bash -c "
              pip install --no-cache-dir \
                requests \
                -t /opt/python \
              && find /opt/python -name '*.dist-info' -or -name '*.egg-info' | xargs rm -rf
            "

      - name: Package twitter-scraper-deps layer
        run: |
          cd layer_twitter
          zip -r ../twitter_layer.zip python

      - name: Upload twitter layer.zip to S3
        run: aws s3 cp twitter_layer.zip s3://$LAYER_BUCKET/twitter_layer.zip

      - name: Publish new twitter-scraper-deps Lambda layer version
        id: publish_twitter_layer
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name twitter-scraper-deps \
            --description "Dependencies for twitter scraper (requests)" \
            --license-info "MIT" \
            --content S3Bucket=$LAYER_BUCKET,S3Key=twitter_layer.zip \
            --compatible-runtimes python3.11 \
            --output text \
            --query LayerVersionArn)
          echo "twitterLayerArn=$LAYER_ARN" >> $GITHUB_OUTPUT

      - name: Show published Twitter Layer ARN
        run: echo "→ ${{ steps.publish_twitter_layer.outputs.twitterLayerArn }}"

      # ─── Trading Lambda packaging & deploy ────────────────────────────────────────

      - name: Package Trading Lambda function code
        run: zip -r function.zip lambda_bot

      - name: Update Trading Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --zip-file fileb://function.zip

      - name: Wait for Trading function to be Active
        run: aws lambda wait function-active --function-name $FUNCTION_NAME

      - name: Attach Trading Layer & handler to Trading Lambda (with retry)
        run: |
          LAYER_ARN=${{ steps.publish_trading_layer.outputs.tradingLayerArn }}
          for i in {1..6}; do
            echo "Attempt $i to update Trading Lambda configuration..."
            if aws lambda update-function-configuration \
                 --function-name $FUNCTION_NAME \
                 --handler lambda_bot.lambda_function.lambda_handler \
                 --layers "$LAYER_ARN"; then
              echo "✔ Trading Lambda config updated."
              break
            else
              echo "⚠️ Conflict updating Trading Lambda—retrying in 10s..."
              sleep 10
            fi
          done

      # ─── Twitter Scraper Lambda packaging & deploy ────────────────────────────────

      - name: Package Twitter Scraper Lambda function code
        run: zip -r twitter_function.zip lambda_bot_twitter_scaper

      - name: Update Twitter Scraper Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name $TWITTER_FUNCTION_NAME \
            --zip-file fileb://twitter_function.zip

      - name: Wait for Twitter Scraper function to be Active
        run: aws lambda wait function-active --function-name $TWITTER_FUNCTION_NAME

      - name: Attach Twitter Layer & handler to Twitter Scraper Lambda (with retry)
        run: |
          LAYER_ARN=${{ steps.publish_twitter_layer.outputs.twitterLayerArn }}
          for i in {1..6}; do
            echo "Attempt $i to update Twitter Scraper Lambda configuration..."
            if aws lambda update-function-configuration \
                 --function-name $TWITTER_FUNCTION_NAME \
                 --handler lambda_function.lambda_handler \
                 --layers "$LAYER_ARN"; then
              echo "✔ Twitter Scraper Lambda config updated."
              break
            else
              echo "⚠️ Conflict updating Twitter Scraper Lambda—retrying in 10s..."
              sleep 10
            fi
          done
