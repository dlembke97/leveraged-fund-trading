name: Build & Release Lambda Layers

on:
  push:
    # branches:
    #   - main                                       # limit to default branch :contentReference[oaicite:6]{index=6}
    paths:
      - 'layer/trading-layer/**'                   # trading dependencies changes :contentReference[oaicite:7]{index=7}
      - 'layer/data-layer/**'                      # data dependencies changes :contentReference[oaicite:8]{index=8}
      - '.github/workflows/build-layers.yml'       # workflow file updates :contentReference[oaicite:9]{index=9}
  workflow_dispatch:                              # manual trigger allowed :contentReference[oaicite:10]{index=10}

jobs:
  trading-layer:
    name: Build & Publish Trading Layer
    runs-on: ubuntu-latest                         # GitHub-hosted runner :contentReference[oaicite:11]{index=11}

    steps:
      - name: Check out code
        uses: actions/checkout@v4                  # checkout action :contentReference[oaicite:12]{index=12}

      - name: Set up Python 3.11
        uses: actions/setup-python@v5              # Python setup action :contentReference[oaicite:13]{index=13}
        with:
          python-version: '3.11'

      - name: Upgrade pip, setuptools & wheel
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Install Alpaca REST client without streaming deps
        run: |
          python -m pip install --upgrade pip setuptools wheel

          # Install alpaca-trade-api REST client only, ignoring its embedded deps:
          pip install \
            --no-deps \
            --target layer/trading-layer/python/lib/python3.11/site-packages \
            alpaca-trade-api==3.2.0                                    # :contentReference[oaicite:6]{index=6}

          # Manually install the minimal runtime deps that have compatible wheels:
          pip install \
            --no-cache-dir \
            --target layer/trading-layer/python/lib/python3.11/site-packages \
            aiohttp==3.11.17 msgpack==1.0.3 requests==2.32.3 urllib3==1.26.20  # :contentReference[oaicite:7]{index=7}

      - name: Zip trading layer directory
        run: |
          cd layer/trading-layer
          zip -r ../../trading-layer.zip python

      - name: Publish Trading Layer to AWS Lambda
        id: publish-trading
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          TRADING_ARN=$(aws lambda publish-layer-version \
            --layer-name trading-layer \
            --description "Trading API dependencies" \
            --zip-file fileb://trading-layer.zip \
            --compatible-runtimes python3.11 \
            --query 'LayerVersionArn' \
            --output text)                         # publish-layer-version API :contentReference[oaicite:14]{index=14}
          echo "::set-output name=arn::$TRADING_ARN"

      - name: Upload trading layer artifact
        uses: actions/upload-artifact@v4            # artifact action (v4) :contentReference[oaicite:15]{index=15}
        with:
          name: trading-layer
          path: trading-layer.zip

  data-layer:
    name: Build & Publish Data Layer
    runs-on: ubuntu-latest
    needs: trading-layer                           # build after trading-layer :contentReference[oaicite:16]{index=16}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Upgrade pip, setuptools & wheel
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Install data dependencies into layer
        run: |
          pip install \
            --no-cache-dir \
            --only-binary=:all: \
            --target layer/data-layer/python/lib/python3.11/site-packages \
            -r layer/data-layer/requirements.txt

      - name: Zip data layer directory
        run: |
          cd layer/data-layer
          zip -r ../../data-layer.zip python

      - name: Publish Data Layer to AWS Lambda
        id: publish-data
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          DATA_ARN=$(aws lambda publish-layer-version \
            --layer-name data-layer \
            --description "Market data dependencies" \
            --zip-file fileb://data-layer.zip \
            --compatible-runtimes python3.11 \
            --query 'LayerVersionArn' \
            --output text)                         # publish-layer-version API :contentReference[oaicite:17]{index=17}
          echo "::set-output name=arn::$DATA_ARN"

      - name: Upload data layer artifact
        uses: actions/upload-artifact@v4
        with:
          name: data-layer
          path: data-layer.zip

  attach-layers:
    name: Attach Layers to Lambda Function
    runs-on: ubuntu-latest
    needs: [trading-layer, data-layer]              # depends on both layer builds

    steps:
      - name: Update function configuration
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws lambda update-function-configuration \
            --function-name MyFunction \
            --layers \
              ${{ needs.trading-layer.outputs.arn }} \
              ${{ needs.data-layer.outputs.arn }}      # update-function-configuration API :contentReference[oaicite:18]{index=18}
